plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id "com.adarshr.test-logger" version "4.0.0"
}

def loadEnvFile() {
    def envFile = file(".env")
    def properties = new Properties()

    if (envFile.exists()) {
        envFile.withReader { reader ->
            properties.load(reader)
        }
    }

    return properties
}

def loadRemoteEnv() {
    def properties = new Properties()
    try {
        def command = "inspire-tms vault -- printenv"
        def process = command.execute()
        process.waitFor()

        if (process.exitValue() != 0) {
            println "Failed to fetch environment variables. Error: ${process.err.text}"
            return properties
        }

        // Populate the Properties object with key-value pairs from the output
        process.text.eachLine { line ->
            if (line.contains('=')) {
                def (key, value) = line.split('=', 2)
                properties.setProperty(key.trim(), value?.trim())
            }
        }
    } catch (Exception e) {
        println "Error while executing command: ${e.message}"
    }

    return properties
}

group = 'com.inspiretmstech.microservices'
version = '00000000.000000'

def env = loadEnvFile()
def remoteEnv = loadRemoteEnv()

def GH_USER = remoteEnv.getProperty("GH_USER")
        ?: env.getProperty("GH_USER")
        ?: project.findProperty("gpr.user")
        ?: System.getenv("GH_USER")

def GH_PASS = remoteEnv.getProperty("GH_TOKEN")
        ?: env.getProperty("GH_TOKEN")
        ?: project.findProperty("gpr.key")
        ?: System.getenv("GH_TOKEN")

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/inspire-labs-tms-tech/inspire-tms-db")
        credentials {
            username = GH_USER
            password = GH_PASS
        }
    }
}

dependencies {
    implementation("com.inspiretmstech:db:1.2.14")
    implementation("com.inspiretmstech:common:1.6.73")
    implementation("com.inspiretmstech.common.microservices:dsg:1.6.73")
    implementation("com.inspiretmstech.common.microservices:gp:1.6.73")
    implementation("org.apache.logging.log4j:log4j-api:2.23.1")
    implementation("org.apache.logging.log4j:log4j-core:2.23.1")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.23.1")
    implementation("org.springframework.boot:spring-boot-starter:3.3.1") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    implementation("org.springframework.boot:spring-boot-starter-aop:3.3.1") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    implementation("org.springframework.boot:spring-boot-starter-security:3.3.1") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    implementation("org.springframework.boot:spring-boot-starter-validation:3.3.1") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    implementation("org.springframework.boot:spring-boot-starter-web:3.3.1") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")
    implementation("org.apache.pdfbox:pdfbox:3.0.2") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation("com.google.maps:google-maps-services:2.2.0")
    implementation("net.iakovlev:timeshape:2023b.21")
    implementation("org.springframework.boot:spring-boot-starter-log4j2:3.3.1")
    implementation("joda-time:joda-time:2.12.7")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.apache.httpcomponents:httpclient:4.5.14") {
        exclude group: "commons-logging", module: "commons-logging"
    }
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    testImplementation("org.springframework.security:spring-security-test") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-gson:0.12.6'

}

test {
    useJUnitPlatform()
    // ignoreFailures true // for now, to clear CI/CD log-jam
    testLogging {
        exceptionFormat "full"
    }
}
